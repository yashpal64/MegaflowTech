import React, { createContext, useContext, } from "react";
import useModeClassName from "./useModeClassName";
import useModeDetection from "./useModeDetection";
var InteractionMode = createContext("mouse");
var ParentContext = createContext(false);
/**
 * Gets the current interaction mode of the user.
 */
export function useUserInteractionMode() {
    return useContext(InteractionMode);
}
/**
 * Checks if the provided user interaction mode matches the current interaction
 * mode within the app.
 *
 * @param mode The mode to check against.
 * @return true if the mode matches.
 */
export function useIsUserInteractionMode(mode) {
    return useUserInteractionMode() === mode;
}
/**
 * A component that should be mounted once in your app near the top of the tree
 * to determine the current interaction mode for your app.
 */
export function InteractionModeListener(_a) {
    var children = _a.children;
    if (useContext(ParentContext)) {
        throw new Error("Nested `InteractionModeListener` components");
    }
    var mode = useModeDetection();
    useModeClassName(mode);
    return (React.createElement(InteractionMode.Provider, { value: mode },
        React.createElement(ParentContext.Provider, { value: true }, children)));
}
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        InteractionModeListener.propTypes = {
            children: PropTypes.node.isRequired,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=InteractionMode.js.map