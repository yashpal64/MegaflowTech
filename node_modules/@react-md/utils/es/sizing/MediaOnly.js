import useAppSize from "./useAppSize";
/**
 * A simple component that will render the children only when the app is
 * considered in mobile mode via the `AppSizeContext`. A mobile view will be
 * true for both phones and tablets.
 */
export var MobileOnly = function (props) {
    var _a = props, children = _a.children, fallback = _a.fallback;
    var _b = useAppSize(), isPhone = _b.isPhone, isTablet = _b.isTablet;
    if (isPhone || isTablet) {
        return children;
    }
    return fallback;
};
/**
 * A simple component that will render the children only when the app is
 * considered in phone mode via the `AppSizeContext`.
 */
export var PhoneOnly = function (props) {
    var _a = props, children = _a.children, fallback = _a.fallback;
    var isPhone = useAppSize().isPhone;
    if (isPhone) {
        return children;
    }
    return fallback;
};
/**
 * A simple component that will render the children only when the app is
 * considered in tablet mode via the `AppSizeContext`.
 */
export var TabletOnly = function (props) {
    var _a = props, children = _a.children, fallback = _a.fallback;
    var isTablet = useAppSize().isTablet;
    if (isTablet) {
        return children;
    }
    return fallback;
};
/**
 * A simple component that will render the children only when the app is
 * considered in desktop mode via the `AppSizeContext`.
 */
export var DesktopOnly = function (props) {
    var _a = props, children = _a.children, fallback = _a.fallback;
    var isDesktop = useAppSize().isDesktop;
    if (isDesktop) {
        return children;
    }
    return fallback;
};
var defaultProps = {
    fallback: null,
};
MobileOnly.defaultProps = defaultProps;
PhoneOnly.defaultProps = defaultProps;
TabletOnly.defaultProps = defaultProps;
DesktopOnly.defaultProps = defaultProps;
//# sourceMappingURL=MediaOnly.js.map