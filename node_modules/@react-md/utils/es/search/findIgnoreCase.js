import { getSearchString, DEFAULT_SEARCH_OPTIONS, } from "./utils";
import defaults from "../defaults";
/**
 * This is a simple `array.find` implementation that will work for any
 * searchable item type and return the first item that starts with the current
 * query string ignoring case.
 *
 * @param query The current query string to use to match with
 * @param searchable The list of searchable items
 * @param options The additional search options available.
 * @return the found item in the searchable list or null
 */
export default function findIgnoreCase(query, searchable, options) {
    if (options === void 0) { options = {}; }
    var _a = defaults(options, DEFAULT_SEARCH_OPTIONS), getItemValue = _a.getItemValue, valueKey = _a.valueKey, trim = _a.trim, ignoreWhitespace = _a.ignoreWhitespace;
    query = getSearchString(query, true, trim, ignoreWhitespace);
    if (!query.length || !searchable.length) {
        return null;
    }
    var found = searchable.find(function (item) {
        var value = getSearchString(getItemValue(item, valueKey), true, trim, ignoreWhitespace);
        return value.indexOf(query) === 0;
    });
    return typeof found === "number" ? found : found || null;
}
//# sourceMappingURL=findIgnoreCase.js.map