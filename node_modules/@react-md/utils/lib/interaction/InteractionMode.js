"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InteractionModeListener = exports.useIsUserInteractionMode = exports.useUserInteractionMode = void 0;
var react_1 = __importStar(require("react"));
var useModeClassName_1 = __importDefault(require("./useModeClassName"));
var useModeDetection_1 = __importDefault(require("./useModeDetection"));
var InteractionMode = react_1.createContext("mouse");
var ParentContext = react_1.createContext(false);
/**
 * Gets the current interaction mode of the user.
 */
function useUserInteractionMode() {
    return react_1.useContext(InteractionMode);
}
exports.useUserInteractionMode = useUserInteractionMode;
/**
 * Checks if the provided user interaction mode matches the current interaction
 * mode within the app.
 *
 * @param mode The mode to check against.
 * @return true if the mode matches.
 */
function useIsUserInteractionMode(mode) {
    return useUserInteractionMode() === mode;
}
exports.useIsUserInteractionMode = useIsUserInteractionMode;
/**
 * A component that should be mounted once in your app near the top of the tree
 * to determine the current interaction mode for your app.
 */
function InteractionModeListener(_a) {
    var children = _a.children;
    if (react_1.useContext(ParentContext)) {
        throw new Error("Nested `InteractionModeListener` components");
    }
    var mode = useModeDetection_1.default();
    useModeClassName_1.default(mode);
    return (react_1.default.createElement(InteractionMode.Provider, { value: mode },
        react_1.default.createElement(ParentContext.Provider, { value: true }, children)));
}
exports.InteractionModeListener = InteractionModeListener;
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        InteractionModeListener.propTypes = {
            children: PropTypes.node.isRequired,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=InteractionMode.js.map