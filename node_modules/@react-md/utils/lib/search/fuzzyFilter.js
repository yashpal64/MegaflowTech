"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var defaults_1 = __importDefault(require("../defaults"));
var getFuzzyRegExp_1 = __importDefault(require("./getFuzzyRegExp"));
var utils_1 = require("./utils");
/**
 * Filters a list by using a fuzzy search "algorithm" (huge double quotes on
 * algorithm). The fuzzy search will just ensure that all the letters in the
 * query string appear in-order for all the remaining items. However, the
 * letters *do not need to be consecutive*.
 *
 * @param query The current query string
 * @param searchable The list of searchable items that should be filtered
 * @param options All the search options to use
 * @return A filtered list of all the searchable items based on the query
 * string.
 */
function fuzzyFilter(query, searchable, options) {
    if (options === void 0) { options = {}; }
    var _a = defaults_1.default(options, utils_1.DEFAULT_SEARCH_OPTIONS), getItemValue = _a.getItemValue, valueKey = _a.valueKey, trim = _a.trim, ignoreWhitespace = _a.ignoreWhitespace;
    query = utils_1.getSearchString(query, false, trim, ignoreWhitespace);
    if (!searchable.length || !query) {
        return searchable;
    }
    var queryRegExp = getFuzzyRegExp_1.default(query);
    return searchable.filter(function (item) {
        var value = utils_1.getSearchString(getItemValue(item, valueKey), false, trim, ignoreWhitespace);
        return value.length && value.match(queryRegExp);
    });
}
exports.default = fuzzyFilter;
//# sourceMappingURL=fuzzyFilter.js.map