"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var useResizeListener_1 = __importDefault(require("./useResizeListener"));
/**
 * This is a simple component that will attach a throttled resize event listener
 * when mounted, and detach when it unmounts.
 *
 * This component only works for entire app resize events. If you are looking
 * for specific element resize events, check out the `ResizeObserver` component
 * instead.
 */
function ResizeListener(_a) {
    var onResize = _a.onResize, options = _a.options, _b = _a.immediate, immediate = _b === void 0 ? typeof window !== "undefined" : _b;
    useResizeListener_1.default({ onResize: onResize, options: options, immediate: immediate, enabled: true });
    return null;
}
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        ResizeListener.propTypes = {
            onResize: PropTypes.func.isRequired,
            options: PropTypes.object,
            immediate: PropTypes.bool,
        };
    }
    catch (e) { }
}
exports.default = ResizeListener;
//# sourceMappingURL=ResizeListener.js.map