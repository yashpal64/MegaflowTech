"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toWidthPart = void 0;
var react_1 = require("react");
var useMediaQuery_1 = __importDefault(require("./useMediaQuery"));
/**
 * This is a small helper that will create a media query block based on the
 * provided width value.
 */
exports.toWidthPart = function (v, prefix) {
    var type = typeof v;
    if (type === "undefined") {
        return "";
    }
    var value = type === "number" ? v + "px" : v;
    return "(" + prefix + "-width: " + value + ")";
};
/**
 * This is a simple hoo that will create a memoized media query string with the
 * provided min anx max values.
 *
 * @param min An optional min value to use
 * @param max An optional max value to use
 * @return a boolean if the current media query is a match.
 */
function useWidthMediaQuery(_a) {
    var min = _a.min, max = _a.max;
    var query = react_1.useMemo(function () {
        var parts = [exports.toWidthPart(min, "min"), exports.toWidthPart(max, "max")]
            .filter(Boolean)
            .join(" and ");
        return "screen and " + parts;
    }, [min, max]);
    return useMediaQuery_1.default(query);
}
exports.default = useWidthMediaQuery;
//# sourceMappingURL=useWidthMediaQuery.js.map