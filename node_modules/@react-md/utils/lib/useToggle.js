"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var useRefCache_1 = __importDefault(require("./useRefCache"));
/**
 * This hooks provides an easy way to toggle a boolean flag for React
 * components.  The main use case for this will be toggling the visibility of
 * something. All the provided actions are guaranteed to never change.
 *
 * @param defaultToggled Boolean if the visibility should be enabled first
 * render.
 * @return an array containing the toggled state, an enable function, a disable
 * function, a toggle function, and then a manual set toggle function.
 */
function useToggle(defaultToggled) {
    var _a = react_1.useState(defaultToggled), toggled = _a[0], setToggled = _a[1];
    var previous = useRefCache_1.default(toggled);
    var enable = react_1.useCallback(function () {
        if (!previous.current) {
            setToggled(true);
        }
        // disabled since useRefCache
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var disable = react_1.useCallback(function () {
        if (previous.current) {
            setToggled(false);
        }
        // disabled since useRefCache
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var toggle = react_1.useCallback(function () {
        setToggled(function (prevVisible) { return !prevVisible; });
    }, []);
    return [toggled, enable, disable, toggle, setToggled];
}
exports.default = useToggle;
//# sourceMappingURL=useToggle.js.map