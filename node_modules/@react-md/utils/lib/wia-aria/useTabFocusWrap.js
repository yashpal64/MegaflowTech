"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var getFocusableElements_1 = __importDefault(require("./getFocusableElements"));
/**
 * Creates an `onKeyDown` event handler to trap keyboard focus within a
 * container element.
 *
 * @typeparam E The HTMLElement type that has the keydown event listener
 * attached.
 * @param options All the options for handling tab focus wrapping.
 * @return The kedown event handler to enforce focus wrapping or the onKeyDown
 * prop if this functionality is disabled.
 */
function useTabFocusWrap(_a) {
    var _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.disableFocusCache, disableFocusCache = _c === void 0 ? false : _c, onKeyDown = _a.onKeyDown;
    var focusables = react_1.useRef([]);
    var handleKeyDown = react_1.useCallback(function (event) {
        if (onKeyDown) {
            onKeyDown(event);
        }
        if (event.key !== "Tab") {
            return;
        }
        if (disableFocusCache || !focusables.current.length) {
            focusables.current = getFocusableElements_1.default(event.currentTarget);
        }
        var elements = focusables.current;
        var l = elements.length;
        if (l === 0) {
            return;
        }
        if (l === 1) {
            event.preventDefault();
        }
        else if (elements[0] === event.target && event.shiftKey) {
            event.preventDefault();
            elements[l - 1].focus();
        }
        else if (elements[l - 1] === event.target && !event.shiftKey) {
            event.preventDefault();
            elements[0].focus();
        }
    }, [onKeyDown, disableFocusCache]);
    return disabled ? onKeyDown : handleKeyDown;
}
exports.default = useTabFocusWrap;
//# sourceMappingURL=useTabFocusWrap.js.map