import React, { Children, cloneElement, isValidElement, } from "react";
import cn from "classnames";
var TextIconSpacing = function (_a) {
    var _b;
    var className = _a.className, propIcon = _a.icon, _c = _a.children, children = _c === void 0 ? null : _c, _d = _a.stacked, stacked = _d === void 0 ? false : _d, _e = _a.iconAfter, iconAfter = _e === void 0 ? false : _e, _f = _a.forceIconWrap, forceIconWrap = _f === void 0 ? false : _f, _g = _a.beforeClassName, beforeClassName = _g === void 0 ? "rmd-icon--before" : _g, _h = _a.afterClassName, afterClassName = _h === void 0 ? "rmd-icon--after" : _h, _j = _a.aboveClassName, aboveClassName = _j === void 0 ? "rmd-icon--above" : _j, _k = _a.belowClassName, belowClassName = _k === void 0 ? "rmd-icon--below" : _k;
    if (!propIcon) {
        return React.createElement(React.Fragment, null, children);
    }
    var baseClassName = cn((_b = {},
        _b[beforeClassName] = !stacked && !iconAfter,
        _b[afterClassName] = !stacked && iconAfter,
        _b[aboveClassName] = stacked && !iconAfter,
        _b[belowClassName] = stacked && iconAfter,
        _b), className);
    var iconEl = propIcon;
    var content = children;
    if (!forceIconWrap && isValidElement(propIcon)) {
        var icon = Children.only(propIcon);
        iconEl = cloneElement(icon, {
            className: cn(baseClassName, icon.props.className),
        });
    }
    else if (propIcon) {
        iconEl = (React.createElement("span", { className: cn("rmd-text-icon-spacing", baseClassName) }, propIcon));
    }
    if (iconEl) {
        content = (React.createElement(React.Fragment, null,
            !iconAfter && iconEl,
            children,
            iconAfter && iconEl));
    }
    return content;
};
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        TextIconSpacing.propTypes = {
            className: PropTypes.string,
            icon: PropTypes.oneOfType([
                PropTypes.element,
                PropTypes.node,
                PropTypes.object,
            ]),
            iconAfter: PropTypes.bool,
            stacked: PropTypes.bool,
            children: PropTypes.node,
            beforeClassName: PropTypes.string,
            afterClassName: PropTypes.string,
            aboveClassName: PropTypes.string,
            belowClassName: PropTypes.string,
            forceIconWrap: PropTypes.bool,
        };
    }
    catch (e) { }
}
export default TextIconSpacing;
//# sourceMappingURL=TextIconSpacing.js.map