{"ast":null,"code":"var _pausedOverlayWrapper, _videoSizingStyles; // Enumerates states that the video can be in\n\n\nexport var VIDEO_STATE = {\n  paused: 'paused',\n  loading: 'loading',\n  playing: 'playing'\n}; // Enumerates states that the hover player can be in\n\nexport var HOVER_PLAYER_STATE = {\n  paused: 'paused',\n  loading: 'loading',\n  playing: 'playing'\n}; // Enumerates sizing modes which define how the player's contents should be sized relative to each other\n\nexport var SIZING_MODES = {\n  // Everything should be sized based on the paused overlay's dimensions - the video element will expand to fill that space\n  overlay: 'overlay',\n  // Everything should be sized based on the video element's dimensions - the overlays will expand to cover the video\n  video: 'video',\n  // Everything should be sized based on the player's outer container div - the overlays and video will all expand to cover\n  // the container\n  container: 'container',\n  // Manual mode does not apply any special styling and allows the developer to exercise full control\n  // over how everything should be sized - this means you will likely need to provide your own custom styling for\n  // both the paused overlay and the video element\n  manual: 'manual'\n}; // CSS styles to make some contents in the player expand to fill the container\n\nexport var expandToFillContainerStyle = {\n  position: 'absolute',\n  width: '100%',\n  height: '100%',\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0\n}; // Styles to apply to the paused overlay wrapper and video element for different sizing modes\n\nexport var pausedOverlayWrapperSizingStyles = (_pausedOverlayWrapper = {}, _pausedOverlayWrapper[SIZING_MODES.overlay] = {\n  position: 'relative'\n}, _pausedOverlayWrapper[SIZING_MODES.video] = expandToFillContainerStyle, _pausedOverlayWrapper[SIZING_MODES.container] = expandToFillContainerStyle, _pausedOverlayWrapper[SIZING_MODES.manual] = null, _pausedOverlayWrapper);\nexport var videoSizingStyles = (_videoSizingStyles = {}, _videoSizingStyles[SIZING_MODES.overlay] = expandToFillContainerStyle, _videoSizingStyles[SIZING_MODES.video] = {\n  display: 'block',\n  width: '100%'\n}, _videoSizingStyles[SIZING_MODES.container] = expandToFillContainerStyle, _videoSizingStyles[SIZING_MODES.manual] = null, _videoSizingStyles);","map":{"version":3,"sources":["C:/Users/Abhinandan Singhal/Desktop/Nayi-Website/node_modules/react-hover-video-player/es/constants.js"],"names":["_pausedOverlayWrapper","_videoSizingStyles","VIDEO_STATE","paused","loading","playing","HOVER_PLAYER_STATE","SIZING_MODES","overlay","video","container","manual","expandToFillContainerStyle","position","width","height","top","bottom","left","right","pausedOverlayWrapperSizingStyles","videoSizingStyles","display"],"mappings":"AAAA,IAAIA,qBAAJ,EAA2BC,kBAA3B,C,CAEA;;;AACA,OAAO,IAAIC,WAAW,GAAG;AACvBC,EAAAA,MAAM,EAAE,QADe;AAEvBC,EAAAA,OAAO,EAAE,SAFc;AAGvBC,EAAAA,OAAO,EAAE;AAHc,CAAlB,C,CAIJ;;AAEH,OAAO,IAAIC,kBAAkB,GAAG;AAC9BH,EAAAA,MAAM,EAAE,QADsB;AAE9BC,EAAAA,OAAO,EAAE,SAFqB;AAG9BC,EAAAA,OAAO,EAAE;AAHqB,CAAzB,C,CAIJ;;AAEH,OAAO,IAAIE,YAAY,GAAG;AACxB;AACAC,EAAAA,OAAO,EAAE,SAFe;AAGxB;AACAC,EAAAA,KAAK,EAAE,OAJiB;AAKxB;AACA;AACAC,EAAAA,SAAS,EAAE,WAPa;AAQxB;AACA;AACA;AACAC,EAAAA,MAAM,EAAE;AAXgB,CAAnB,C,CAYJ;;AAEH,OAAO,IAAIC,0BAA0B,GAAG;AACtCC,EAAAA,QAAQ,EAAE,UAD4B;AAEtCC,EAAAA,KAAK,EAAE,MAF+B;AAGtCC,EAAAA,MAAM,EAAE,MAH8B;AAItCC,EAAAA,GAAG,EAAE,CAJiC;AAKtCC,EAAAA,MAAM,EAAE,CAL8B;AAMtCC,EAAAA,IAAI,EAAE,CANgC;AAOtCC,EAAAA,KAAK,EAAE;AAP+B,CAAjC,C,CAQJ;;AAEH,OAAO,IAAIC,gCAAgC,IAAIpB,qBAAqB,GAAG,EAAxB,EAA4BA,qBAAqB,CAACO,YAAY,CAACC,OAAd,CAArB,GAA8C;AACvHK,EAAAA,QAAQ,EAAE;AAD6G,CAA1E,EAE5Cb,qBAAqB,CAACO,YAAY,CAACE,KAAd,CAArB,GAA4CG,0BAFA,EAE4BZ,qBAAqB,CAACO,YAAY,CAACG,SAAd,CAArB,GAAgDE,0BAF5E,EAEwGZ,qBAAqB,CAACO,YAAY,CAACI,MAAd,CAArB,GAA6C,IAFrJ,EAE2JX,qBAF/J,CAApC;AAGP,OAAO,IAAIqB,iBAAiB,IAAIpB,kBAAkB,GAAG,EAArB,EAAyBA,kBAAkB,CAACM,YAAY,CAACC,OAAd,CAAlB,GAA2CI,0BAApE,EAAgGX,kBAAkB,CAACM,YAAY,CAACE,KAAd,CAAlB,GAAyC;AACvKa,EAAAA,OAAO,EAAE,OAD8J;AAEvKR,EAAAA,KAAK,EAAE;AAFgK,CAAzI,EAG7Bb,kBAAkB,CAACM,YAAY,CAACG,SAAd,CAAlB,GAA6CE,0BAHhB,EAG4CX,kBAAkB,CAACM,YAAY,CAACI,MAAd,CAAlB,GAA0C,IAHtF,EAG4FV,kBAHhG,CAArB","sourcesContent":["var _pausedOverlayWrapper, _videoSizingStyles;\n\n// Enumerates states that the video can be in\nexport var VIDEO_STATE = {\n  paused: 'paused',\n  loading: 'loading',\n  playing: 'playing'\n}; // Enumerates states that the hover player can be in\n\nexport var HOVER_PLAYER_STATE = {\n  paused: 'paused',\n  loading: 'loading',\n  playing: 'playing'\n}; // Enumerates sizing modes which define how the player's contents should be sized relative to each other\n\nexport var SIZING_MODES = {\n  // Everything should be sized based on the paused overlay's dimensions - the video element will expand to fill that space\n  overlay: 'overlay',\n  // Everything should be sized based on the video element's dimensions - the overlays will expand to cover the video\n  video: 'video',\n  // Everything should be sized based on the player's outer container div - the overlays and video will all expand to cover\n  // the container\n  container: 'container',\n  // Manual mode does not apply any special styling and allows the developer to exercise full control\n  // over how everything should be sized - this means you will likely need to provide your own custom styling for\n  // both the paused overlay and the video element\n  manual: 'manual'\n}; // CSS styles to make some contents in the player expand to fill the container\n\nexport var expandToFillContainerStyle = {\n  position: 'absolute',\n  width: '100%',\n  height: '100%',\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0\n}; // Styles to apply to the paused overlay wrapper and video element for different sizing modes\n\nexport var pausedOverlayWrapperSizingStyles = (_pausedOverlayWrapper = {}, _pausedOverlayWrapper[SIZING_MODES.overlay] = {\n  position: 'relative'\n}, _pausedOverlayWrapper[SIZING_MODES.video] = expandToFillContainerStyle, _pausedOverlayWrapper[SIZING_MODES.container] = expandToFillContainerStyle, _pausedOverlayWrapper[SIZING_MODES.manual] = null, _pausedOverlayWrapper);\nexport var videoSizingStyles = (_videoSizingStyles = {}, _videoSizingStyles[SIZING_MODES.overlay] = expandToFillContainerStyle, _videoSizingStyles[SIZING_MODES.video] = {\n  display: 'block',\n  width: '100%'\n}, _videoSizingStyles[SIZING_MODES.container] = expandToFillContainerStyle, _videoSizingStyles[SIZING_MODES.manual] = null, _videoSizingStyles);"]},"metadata":{},"sourceType":"module"}