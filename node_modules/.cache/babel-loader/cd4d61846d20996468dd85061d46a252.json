{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _utils = require('./utils');\n\nvar _styles = require('./styles');\n\nvar _styles2 = _interopRequireDefault(_styles);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MAXCOUNT = 6;\n\nvar AnimakitRotator = function (_Component) {\n  _inherits(AnimakitRotator, _Component);\n\n  function AnimakitRotator(props) {\n    _classCallCheck(this, AnimakitRotator);\n\n    var _this = _possibleConstructorReturn(this, (AnimakitRotator.__proto__ || Object.getPrototypeOf(AnimakitRotator)).call(this, props));\n\n    _this.state = {\n      animation: false,\n      sidesCount: 0,\n      currentSide: 0,\n      prevSide: 0,\n      width: 0,\n      height: 0,\n      winHeight: 0,\n      perspective: 0,\n      sideOffset: 0,\n      figureAngle: 0,\n      sidesAngles: [],\n      turnover: 0\n    };\n    _this.setFigureNode = _this.setFigureNode.bind(_this);\n    return _this;\n  }\n\n  _createClass(AnimakitRotator, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.figureNode = null;\n      this.sidesNodes = [];\n      this.sidesDimensions = [];\n      this.is3DSupported = (0, _utils.is3DSupported)();\n      this.transitionEventName = (0, _utils.transitionEventName)();\n      this.listeners = this.getListeners();\n      this.animationReset = false;\n      this.animationResetTO = null;\n      this.resizeCheckerRAF = null;\n      this.onWinResize();\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.repaint(this.props);\n      this.toggleAnimationListener(true);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.repaint(nextProps);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this2 = this;\n\n      var stateChanged = !(0, _utils.isEqual)(nextState, this.state);\n      var childrenChanged = !(0, _utils.isEqual)(nextProps.children, this.props.children);\n      var propsChanged = ['background', 'shadow'].some(function (name) {\n        return nextProps[name] !== _this2.props[name];\n      });\n      return stateChanged || childrenChanged || propsChanged;\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate() {\n      this.toggleResizeChecker(false);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.toggleResizeChecker(true);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.toggleResizeChecker(false);\n      this.toggleAnimationReset(false);\n      this.toggleAnimationListener(false);\n      this.toggleWinResizeListener(false);\n    }\n  }, {\n    key: 'onTransitionEnd',\n    value: function onTransitionEnd() {\n      if (!this.animationReset) return;\n      this.setState({\n        animation: false\n      });\n    }\n  }, {\n    key: 'onCheckResize',\n    value: function onCheckResize() {\n      this.toggleResizeChecker(false);\n      this.softRepaint();\n      this.toggleResizeChecker(true);\n    }\n  }, {\n    key: 'onWinResize',\n    value: function onWinResize() {\n      this.setState({\n        winHeight: window.innerHeight\n      });\n    }\n  }, {\n    key: 'getListeners',\n    value: function getListeners() {\n      return {\n        onTransitionEnd: this.onTransitionEnd.bind(this),\n        onCheckResize: this.onCheckResize.bind(this),\n        onWinResize: this.onWinResize.bind(this)\n      };\n    }\n  }, {\n    key: 'toggleResizeChecker',\n    value: function toggleResizeChecker(start) {\n      if (typeof requestAnimationFrame === 'undefined') return;\n\n      if (start) {\n        this.resizeCheckerRAF = requestAnimationFrame(this.listeners.onCheckResize);\n      } else if (this.resizeCheckerRAF) {\n        cancelAnimationFrame(this.resizeCheckerRAF);\n      }\n    }\n  }, {\n    key: 'toggleAnimationReset',\n    value: function toggleAnimationReset(add) {\n      var _this3 = this;\n\n      if (this.animationResetTO) clearTimeout(this.animationResetTO);\n\n      if (add) {\n        this.animationResetTO = setTimeout(function () {\n          _this3.animationReset = true;\n        }, this.props.duration);\n      } else {\n        this.animationReset = false;\n      }\n    }\n  }, {\n    key: 'toggleAnimationListener',\n    value: function toggleAnimationListener(add) {\n      var method = add ? 'addEventListener' : 'removeEventListener';\n      this.figureNode[method](this.transitionEventName, this.listeners.onTransitionEnd, false);\n    }\n  }, {\n    key: 'toggleWinResizeListener',\n    value: function toggleWinResizeListener(add) {\n      var method = add ? 'addEventListener' : 'removeEventListener';\n      window[method]('resize', this.listeners.onWinResize, false);\n    }\n  }, {\n    key: 'getSceneStyles',\n    value: function getSceneStyles() {\n      var _state = this.state,\n          width = _state.width,\n          height = _state.height,\n          perspective = _state.perspective;\n      if (!width || !height) return null;\n      if (!this.is3DSupported) return _extends({}, _styles2.default.scene, {\n        width: width,\n        height: height\n      });\n      return _extends({}, _styles2.default.scene, {\n        width: width,\n        height: height,\n        perspective: perspective\n      });\n    }\n  }, {\n    key: 'getContainerStyles',\n    value: function getContainerStyles() {\n      if (!this.is3DSupported) return null;\n      var _state2 = this.state,\n          width = _state2.width,\n          height = _state2.height,\n          sideOffset = _state2.sideOffset;\n      if (!width || !height) return null;\n      var transform = 'translateZ(' + sideOffset * -1 + 'px)';\n      return _extends({}, _styles2.default.container, {\n        transform: transform\n      });\n    }\n  }, {\n    key: 'getFigureStyles',\n    value: function getFigureStyles() {\n      if (!this.is3DSupported) return null;\n      var _state3 = this.state,\n          width = _state3.width,\n          height = _state3.height,\n          figureAngle = _state3.figureAngle,\n          turnover = _state3.turnover,\n          axis = _state3.axis,\n          animation = _state3.animation;\n      if (!width || !height) return null;\n      var angle = figureAngle + turnover * 360;\n      var transform = 'rotate' + axis + '(' + angle + 'deg)';\n      if (!animation) return _extends({}, _styles2.default.figure, {\n        transform: transform\n      });\n      var _props = this.props,\n          duration = _props.duration,\n          easing = _props.easing;\n      var transition = 'transform ' + duration + 'ms ' + easing;\n      return _extends({}, _styles2.default.figure, {\n        transform: transform,\n        transition: transition\n      });\n    }\n  }, {\n    key: 'getSideStyles',\n    value: function getSideStyles(num) {\n      var _state4 = this.state,\n          width = _state4.width,\n          height = _state4.height,\n          axis = _state4.axis,\n          sidesAngles = _state4.sidesAngles,\n          sideOffset = _state4.sideOffset,\n          currentSide = _state4.currentSide,\n          animation = _state4.animation;\n      if (!width || !height) return null;\n      var background = this.props.background || 'transparent';\n      var transform = 'rotate' + axis + '(' + sidesAngles[num] + 'deg) translateZ(' + sideOffset + 'px)';\n      if (this.is3DSupported) return _extends({}, _styles2.default.side, {\n        transform: transform,\n        background: background\n      });\n      var opacity = num === currentSide ? 1 : 0;\n      var zIndex = num === currentSide ? 2 : 1;\n      if (!animation) return _extends({}, _styles2.default.side, {\n        opacity: opacity,\n        zIndex: zIndex,\n        background: background\n      });\n      var _props2 = this.props,\n          duration = _props2.duration,\n          easing = _props2.easing;\n      var transition = 'opacity ' + duration + 'ms ' + easing;\n      return _extends({}, _styles2.default.side, {\n        opacity: opacity,\n        zIndex: zIndex,\n        transition: transition,\n        background: background\n      });\n    }\n  }, {\n    key: 'getShadowStyles',\n    value: function getShadowStyles(num) {\n      var _state5 = this.state,\n          currentSide = _state5.currentSide,\n          sidesCount = _state5.sidesCount,\n          animation = _state5.animation;\n      if (!sidesCount) return {};\n      var opacity = num === currentSide ? 0 : 2 / sidesCount;\n      if (!animation) return _extends({}, _styles2.default.sideShadow, {\n        opacity: opacity\n      });\n      var _props3 = this.props,\n          duration = _props3.duration,\n          easing = _props3.easing;\n      var transition = 'opacity ' + duration + 'ms ' + easing;\n      return _extends({}, _styles2.default.sideShadow, {\n        opacity: opacity,\n        transition: transition\n      });\n    }\n  }, {\n    key: 'getChildVisibility',\n    value: function getChildVisibility(num) {\n      if (num >= MAXCOUNT) return false;\n      if (!this.state.width || !this.state.height) return true;\n      var _state6 = this.state,\n          currentSide = _state6.currentSide,\n          prevSide = _state6.prevSide,\n          sidesCount = _state6.sidesCount,\n          animation = _state6.animation;\n      if (num === currentSide) return true;\n\n      if (animation && (sidesCount > 4 || Math.abs(currentSide - num) > 1)) {\n        if (num === prevSide) return true;\n\n        var _getNeighbors = (0, _utils.getNeighbors)(prevSide, sidesCount - 1),\n            _getNeighbors2 = _slicedToArray(_getNeighbors, 2),\n            _neighbor = _getNeighbors2[0],\n            _neighbor2 = _getNeighbors2[1];\n\n        if (num === _neighbor || num === _neighbor2) return true;\n      }\n\n      var _getNeighbors3 = (0, _utils.getNeighbors)(currentSide, sidesCount - 1),\n          _getNeighbors4 = _slicedToArray(_getNeighbors3, 2),\n          neighbor1 = _getNeighbors4[0],\n          neighbor2 = _getNeighbors4[1];\n\n      return (num === neighbor1 || num === neighbor2) && (animation || sidesCount > 4);\n    }\n  }, {\n    key: 'getSideNum',\n    value: function getSideNum(sideKey) {\n      var sideNum = sideKey;\n\n      _react2.default.Children.forEach(this.props.children, function (child, num) {\n        if (child.key === sideKey) sideNum = num;\n      });\n\n      return sideNum;\n    }\n  }, {\n    key: 'calcDimensions',\n    value: function calcDimensions() {\n      var _this4 = this;\n\n      var maxWidth = 0;\n      var maxHeight = 0;\n\n      _react2.default.Children.map(this.props.children, function (child, num) {\n        var width = 0;\n        var height = 0;\n\n        if (_this4.sidesDimensions[num]) {\n          width = _this4.sidesDimensions[num].width;\n          height = _this4.sidesDimensions[num].height;\n        }\n\n        if (_this4.getChildVisibility(num)) {\n          var node = _this4.sidesNodes[num];\n\n          if (node) {\n            var newWidth = node.offsetWidth;\n            var newHeight = node.offsetHeight;\n            width = Math.abs(newWidth - width) <= 1 ? width : newWidth;\n            height = Math.abs(newHeight - height) <= 1 ? height : newHeight;\n          }\n\n          _this4.sidesDimensions[num] = {\n            width: width,\n            height: height\n          };\n        }\n\n        if (width > maxWidth) maxWidth = width;\n        if (height > maxHeight) maxHeight = height;\n      });\n\n      return [maxWidth, maxHeight];\n    }\n  }, {\n    key: 'calcChildrenLength',\n    value: function calcChildrenLength(children) {\n      var length = Array.isArray(children) ? children.length : 1;\n      if (length > MAXCOUNT) length = MAXCOUNT;\n      return length;\n    }\n  }, {\n    key: 'calcRotateAngle',\n    value: function calcRotateAngle(num, sidesCount) {\n      return 360 / sidesCount * num;\n    }\n  }, {\n    key: 'calcSideOffset',\n    value: function calcSideOffset(size, sidesCount) {\n      if (!sidesCount || sidesCount < 3) return 0;\n      var count = sidesCount > MAXCOUNT ? MAXCOUNT : sidesCount;\n      var circleRadius = [0.289, 0.5, 0.688, 0.866];\n      return size * circleRadius[count - 3];\n    }\n  }, {\n    key: 'calcPerspective',\n    value: function calcPerspective(mainDimension, sidesCount) {\n      if (!sidesCount || sidesCount < 2) return null;\n      if (sidesCount === 2) return this.state.winHeight;\n      return mainDimension * 4;\n    }\n  }, {\n    key: 'resetDimensionsState',\n    value: function resetDimensionsState(stateChunk) {\n      var width = stateChunk.width,\n          height = stateChunk.height,\n          perspective = stateChunk.perspective;\n      if (width === this.state.width && height === this.state.height && perspective === this.state.perspective) return {};\n      return stateChunk;\n    }\n  }, {\n    key: 'resetAxisState',\n    value: function resetAxisState(stateChunk) {\n      var axis = stateChunk.axis;\n      if (axis === this.state.axis) return {};\n      return stateChunk;\n    }\n  }, {\n    key: 'resetSidesCountState',\n    value: function resetSidesCountState(stateChunk) {\n      var sidesCount = stateChunk.sidesCount;\n      if (sidesCount === this.state.sidesCount) return {};\n      this.toggleWinResizeListener(sidesCount === 2);\n\n      if (sidesCount < this.state.sidesCount) {\n        this.sidesDimensions.splice(sidesCount - 1, 1);\n      }\n\n      return stateChunk;\n    }\n  }, {\n    key: 'resetCurrentSideState',\n    value: function resetCurrentSideState(stateChunk) {\n      var currentSide = stateChunk.currentSide,\n          sidesCount = stateChunk.sidesCount,\n          axisSign = stateChunk.axisSign,\n          figureAngle = stateChunk.figureAngle;\n      var prevSide = this.state.currentSide;\n      if (currentSide === prevSide) return {};\n      var animation = true;\n      var turnover = this.state.turnover;\n\n      if (currentSide === 0 && prevSide === sidesCount - 1) {\n        turnover += axisSign;\n      }\n\n      if (sidesCount > 2 && currentSide === sidesCount - 1 && prevSide === 0) {\n        turnover -= axisSign;\n      }\n\n      return {\n        currentSide: currentSide,\n        prevSide: prevSide,\n        figureAngle: figureAngle,\n        turnover: turnover,\n        animation: animation\n      };\n    }\n  }, {\n    key: 'softRepaint',\n    value: function softRepaint() {\n      var sidesCount = this.state.sidesCount;\n\n      var _calcDimensions = this.calcDimensions(),\n          _calcDimensions2 = _slicedToArray(_calcDimensions, 2),\n          width = _calcDimensions2[0],\n          height = _calcDimensions2[1];\n\n      var mainDimension = this.state.axis === 'X' ? height : width;\n      var perspective = this.calcPerspective(mainDimension, sidesCount);\n      var sideOffset = this.calcSideOffset(mainDimension, sidesCount);\n      var state = this.resetDimensionsState({\n        width: width,\n        height: height,\n        perspective: perspective,\n        sideOffset: sideOffset\n      });\n      if (Object.keys(state).length) this.setState(state);\n    }\n  }, {\n    key: 'repaint',\n    value: function repaint(nextProps) {\n      var _this5 = this;\n\n      var sidesCount = this.calcChildrenLength(nextProps.children);\n      var axis = nextProps.axis !== 'X' ? 'Y' : 'X';\n\n      var _calcDimensions3 = this.calcDimensions(),\n          _calcDimensions4 = _slicedToArray(_calcDimensions3, 2),\n          width = _calcDimensions4[0],\n          height = _calcDimensions4[1];\n\n      var mainDimension = axis === 'X' ? height : width;\n      var perspective = this.calcPerspective(mainDimension, sidesCount);\n      var sideOffset = this.calcSideOffset(mainDimension, sidesCount);\n      var nextSide = this.getSideNum(nextProps.side);\n      var currentSide = nextSide < sidesCount ? nextSide : sidesCount - 1;\n      var axisSign = axis === 'X' ? 1 : -1;\n      var figureAngle = this.calcRotateAngle(currentSide, sidesCount) * axisSign;\n      var sides = Array(sidesCount).fill(0);\n      var sidesAngles = sides.map(function (_, num) {\n        return _this5.calcRotateAngle(num, sidesCount) * -axisSign;\n      });\n      var state = Object.assign({}, this.resetDimensionsState({\n        width: width,\n        height: height,\n        perspective: perspective,\n        sideOffset: sideOffset\n      }), this.resetAxisState({\n        axis: axis,\n        perspective: perspective,\n        sideOffset: sideOffset,\n        figureAngle: figureAngle,\n        sidesAngles: sidesAngles\n      }), this.resetSidesCountState({\n        sidesCount: sidesCount,\n        sideOffset: sideOffset,\n        figureAngle: figureAngle,\n        sidesAngles: sidesAngles\n      }), this.resetCurrentSideState({\n        currentSide: currentSide,\n        sidesCount: sidesCount,\n        axisSign: axisSign,\n        figureAngle: figureAngle\n      }));\n      this.applyState(state);\n    }\n  }, {\n    key: 'applyState',\n    value: function applyState(state) {\n      if (!Object.keys(state).length) return;\n\n      if (state.animation) {\n        this.toggleAnimationReset(false);\n      }\n\n      this.setState(state);\n\n      if (state.animation) {\n        this.toggleAnimationReset(true);\n      }\n    }\n  }, {\n    key: 'renderShadow',\n    value: function renderShadow(num) {\n      if (!this.props.shadow) return null;\n      if (!this.is3DSupported) return null;\n      return _react2.default.createElement('div', {\n        style: this.getShadowStyles(num)\n      });\n    }\n  }, {\n    key: 'setFigureNode',\n    value: function setFigureNode(c) {\n      this.figureNode = c;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this6 = this;\n\n      var hasBackground = this.props.background !== null;\n      return _react2.default.createElement('div', {\n        style: this.getSceneStyles()\n      }, _react2.default.createElement('div', {\n        style: this.getContainerStyles()\n      }, _react2.default.createElement('div', {\n        style: this.getFigureStyles(),\n        ref: this.setFigureNode\n      }, _react2.default.Children.map(this.props.children, function (child, num) {\n        if (num >= MAXCOUNT) return null;\n        return _react2.default.createElement('div', {\n          style: _this6.getSideStyles(num)\n        }, _react2.default.createElement('div', {\n          style: _styles2.default.sideWrapper,\n          ref: function ref(c) {\n            _this6.sidesNodes[num] = c;\n          }\n        }, _this6.getChildVisibility(num) ? child : null, !hasBackground && _this6.renderShadow(num)), hasBackground && _this6.renderShadow(num));\n      }))));\n    }\n  }]);\n\n  return AnimakitRotator;\n}(_react.Component);\n\nexports.default = AnimakitRotator;\nAnimakitRotator.propTypes = {\n  children: _propTypes2.default.any,\n  sheet: _propTypes2.default.any,\n  axis: _propTypes2.default.string,\n  side: _propTypes2.default.any,\n  duration: _propTypes2.default.number,\n  easing: _propTypes2.default.string,\n  shadow: _propTypes2.default.bool,\n  background: _propTypes2.default.string\n};\nAnimakitRotator.defaultProps = {\n  axis: 'X',\n  side: 0,\n  duration: 1000,\n  easing: 'cubic-bezier(.165,.84,.44,1)',\n  shadow: false,\n  background: null\n};\nmodule.exports = exports['default'];","map":{"version":3,"sources":["AnimakitRotator.es6"],"names":["MAXCOUNT","AnimakitRotator","animation","sidesCount","currentSide","prevSide","width","height","winHeight","perspective","sideOffset","figureAngle","sidesAngles","turnover","nextProps","nextState","stateChanged","childrenChanged","propsChanged","window","innerHeight","onTransitionEnd","onCheckResize","onWinResize","start","requestAnimationFrame","cancelAnimationFrame","add","clearTimeout","method","transform","axis","angle","duration","easing","transition","num","background","opacity","zIndex","Math","neighbor1","neighbor2","sideKey","sideNum","child","maxWidth","maxHeight","node","newWidth","newHeight","children","length","Array","size","count","circleRadius","mainDimension","stateChunk","axisSign","state","Object","nextSide","sides","c","hasBackground","sheet","side","shadow","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { isEqual, is3DSupported, transitionEventName, getNeighbors } from './utils';\n\nimport styles from './styles';\n\nconst MAXCOUNT = 6;\n\nexport default class AnimakitRotator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animation: false,\n\n      sidesCount: 0,\n      currentSide: 0,\n      prevSide: 0,\n\n      width: 0,\n      height: 0,\n      winHeight: 0,\n      perspective: 0,\n\n      sideOffset: 0,\n      figureAngle: 0,\n      sidesAngles: [],\n\n      turnover: 0,\n    };\n\n    this.setFigureNode = this.setFigureNode.bind(this);\n  }\n\n  componentWillMount() {\n    this.figureNode = null;\n    this.sidesNodes = [];\n    this.sidesDimensions = [];\n\n    this.is3DSupported = is3DSupported();\n    this.transitionEventName = transitionEventName();\n\n    this.listeners = this.getListeners();\n\n    this.animationReset = false;\n    this.animationResetTO = null;\n    this.resizeCheckerRAF = null;\n\n    this.onWinResize();\n  }\n\n  componentDidMount() {\n    this.repaint(this.props);\n\n    this.toggleAnimationListener(true);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.repaint(nextProps);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const stateChanged = !isEqual(nextState, this.state);\n\n    const childrenChanged = !isEqual(nextProps.children, this.props.children);\n\n    const propsChanged = ['background', 'shadow'].some(\n      name => nextProps[name] !== this.props[name]\n    );\n\n    return stateChanged || childrenChanged || propsChanged;\n  }\n\n  componentWillUpdate() {\n    this.toggleResizeChecker(false);\n  }\n\n  componentDidUpdate() {\n    this.toggleResizeChecker(true);\n  }\n\n  componentWillUnmount() {\n    this.toggleResizeChecker(false);\n    this.toggleAnimationReset(false);\n    this.toggleAnimationListener(false);\n    this.toggleWinResizeListener(false);\n  }\n\n  onTransitionEnd() {\n    if (!this.animationReset) return;\n\n    this.setState({\n      animation: false,\n    });\n  }\n\n  onCheckResize() {\n    this.toggleResizeChecker(false);\n\n    this.softRepaint();\n\n    this.toggleResizeChecker(true);\n  }\n\n  onWinResize() {\n    this.setState({\n      winHeight: window.innerHeight,\n    });\n  }\n\n  getListeners() {\n    return {\n      onTransitionEnd: this.onTransitionEnd.bind(this),\n      onCheckResize: this.onCheckResize.bind(this),\n      onWinResize: this.onWinResize.bind(this),\n    };\n  }\n\n  toggleResizeChecker(start) {\n    if (typeof requestAnimationFrame === 'undefined') return;\n\n    if (start) {\n      this.resizeCheckerRAF = requestAnimationFrame(this.listeners.onCheckResize);\n    } else if (this.resizeCheckerRAF) {\n      cancelAnimationFrame(this.resizeCheckerRAF);\n    }\n  }\n\n  toggleAnimationReset(add) {\n    if (this.animationResetTO) clearTimeout(this.animationResetTO);\n\n    if (add) {\n      this.animationResetTO = setTimeout(() => {\n        this.animationReset = true;\n      }, this.props.duration);\n    } else {\n      this.animationReset = false;\n    }\n  }\n\n  toggleAnimationListener(add) {\n    const method = add ? 'addEventListener' : 'removeEventListener';\n    this.figureNode[method](this.transitionEventName, this.listeners.onTransitionEnd, false);\n  }\n\n  toggleWinResizeListener(add) {\n    const method = add ? 'addEventListener' : 'removeEventListener';\n    window[method]('resize', this.listeners.onWinResize, false);\n  }\n\n  getSceneStyles() {\n    const { width, height, perspective } = this.state;\n\n    if (!width || !height) return null;\n\n    if (!this.is3DSupported) return { ...styles.scene, width, height };\n\n    return { ...styles.scene, width, height, perspective };\n  }\n\n  getContainerStyles() {\n    if (!this.is3DSupported) return null;\n\n    const { width, height, sideOffset } = this.state;\n\n    if (!width || !height) return null;\n\n    const transform = `translateZ(${sideOffset * -1}px)`;\n\n    return { ...styles.container, transform };\n  }\n\n  getFigureStyles() {\n    if (!this.is3DSupported) return null;\n\n    const { width, height, figureAngle, turnover, axis, animation } = this.state;\n\n    if (!width || !height) return null;\n\n    const angle = figureAngle + (turnover * 360);\n    const transform = `rotate${axis}(${angle}deg)`;\n\n    if (!animation) return { ...styles.figure, transform };\n\n    const { duration, easing } = this.props;\n    const transition = `transform ${duration}ms ${easing}`;\n\n    return { ...styles.figure, transform, transition };\n  }\n\n  getSideStyles(num) {\n    const { width, height, axis, sidesAngles, sideOffset, currentSide, animation } = this.state;\n\n    if (!width || !height) return null;\n\n    const background = this.props.background || 'transparent';\n    const transform = `rotate${axis}(${sidesAngles[num]}deg) translateZ(${sideOffset}px)`;\n\n    if (this.is3DSupported) return { ...styles.side, transform, background };\n\n    const opacity = num === currentSide ? 1 : 0;\n    const zIndex = num === currentSide ? 2 : 1;\n\n    if (!animation) return { ...styles.side, opacity, zIndex, background };\n\n    const { duration, easing } = this.props;\n    const transition = `opacity ${duration}ms ${easing}`;\n\n    return { ...styles.side, opacity, zIndex, transition, background };\n  }\n\n  getShadowStyles(num) {\n    const { currentSide, sidesCount, animation } = this.state;\n\n    if (!sidesCount) return {};\n\n    const opacity = num === currentSide ? 0 : 2 / sidesCount;\n\n    if (!animation) return { ...styles.sideShadow, opacity };\n\n    const { duration, easing } = this.props;\n    const transition = `opacity ${duration}ms ${easing}`;\n\n    return { ...styles.sideShadow, opacity, transition };\n  }\n\n  getChildVisibility(num) {\n    if (num >= MAXCOUNT) return false;\n\n    if (!this.state.width || !this.state.height) return true;\n\n    const { currentSide, prevSide, sidesCount, animation } = this.state;\n\n    if (num === currentSide) return true;\n\n    if (animation && (sidesCount > 4 || Math.abs(currentSide - num) > 1)) {\n      if (num === prevSide) return true;\n\n      const [neighbor1, neighbor2] = getNeighbors(prevSide, sidesCount - 1);\n\n      if (num === neighbor1 || num === neighbor2) return true;\n    }\n\n    const [neighbor1, neighbor2] = getNeighbors(currentSide, sidesCount - 1);\n\n    return (num === neighbor1 || num === neighbor2) && (animation || sidesCount > 4);\n  }\n\n  getSideNum(sideKey) {\n    let sideNum = sideKey;\n\n    React.Children.forEach(this.props.children, (child, num) => {\n      if (child.key === sideKey) sideNum = num;\n    });\n\n    return sideNum;\n  }\n\n  calcDimensions() {\n    let maxWidth = 0;\n    let maxHeight = 0;\n\n    React.Children.map(this.props.children, (child, num) => {\n      let width = 0;\n      let height = 0;\n\n      if (this.sidesDimensions[num]) {\n        width = this.sidesDimensions[num].width;\n        height = this.sidesDimensions[num].height;\n      }\n\n      if (this.getChildVisibility(num)) {\n        const node = this.sidesNodes[num];\n\n        if (node) {\n          const newWidth = node.offsetWidth;\n          const newHeight = node.offsetHeight;\n\n          width = (Math.abs(newWidth - width) <= 1) ? width : newWidth;\n          height = (Math.abs(newHeight - height) <= 1) ? height : newHeight;\n        }\n\n        this.sidesDimensions[num] = { width, height };\n      }\n\n      if (width > maxWidth) maxWidth = width;\n      if (height > maxHeight) maxHeight = height;\n    });\n\n    return [maxWidth, maxHeight];\n  }\n\n  calcChildrenLength(children) {\n    let length = Array.isArray(children) ? children.length : 1;\n\n    if (length > MAXCOUNT) length = MAXCOUNT;\n\n    return length;\n  }\n\n  calcRotateAngle(num, sidesCount) {\n    return (360 / sidesCount) * num;\n  }\n\n  calcSideOffset(size, sidesCount) {\n    if (!sidesCount || sidesCount < 3) return 0;\n\n    const count = sidesCount > MAXCOUNT ? MAXCOUNT : sidesCount;\n\n    const circleRadius = [0.289, 0.5, 0.688, 0.866];\n\n    return size * circleRadius[count - 3];\n  }\n\n  calcPerspective(mainDimension, sidesCount) {\n    if (!sidesCount || sidesCount < 2) return null;\n    if (sidesCount === 2) return this.state.winHeight;\n    return mainDimension * 4;\n  }\n\n  resetDimensionsState(stateChunk) {\n    const { width, height, perspective } = stateChunk;\n\n    if (\n      width === this.state.width &&\n      height === this.state.height &&\n      perspective === this.state.perspective\n    ) return {};\n\n    return stateChunk;\n  }\n\n  resetAxisState(stateChunk) {\n    const axis = stateChunk.axis;\n\n    if (axis === this.state.axis) return {};\n\n    return stateChunk;\n  }\n\n  resetSidesCountState(stateChunk) {\n    const sidesCount = stateChunk.sidesCount;\n\n    if (sidesCount === this.state.sidesCount) return {};\n\n    this.toggleWinResizeListener(sidesCount === 2);\n\n    if (sidesCount < this.state.sidesCount) {\n      this.sidesDimensions.splice(sidesCount - 1, 1);\n    }\n\n    return stateChunk;\n  }\n\n  resetCurrentSideState(stateChunk) {\n    const { currentSide, sidesCount, axisSign, figureAngle } = stateChunk;\n    const prevSide = this.state.currentSide;\n\n    if (currentSide === prevSide) return {};\n\n    const animation = true;\n    let turnover = this.state.turnover;\n\n    if (currentSide === 0 && prevSide === sidesCount - 1) {\n      turnover += axisSign;\n    }\n    if (sidesCount > 2 && currentSide === sidesCount - 1 && prevSide === 0) {\n      turnover -= axisSign;\n    }\n\n    return { currentSide, prevSide, figureAngle, turnover, animation };\n  }\n\n  softRepaint() {\n    const sidesCount = this.state.sidesCount;\n\n    const [width, height] = this.calcDimensions();\n    const mainDimension = this.state.axis === 'X' ? height : width;\n    const perspective = this.calcPerspective(mainDimension, sidesCount);\n    const sideOffset = this.calcSideOffset(mainDimension, sidesCount);\n\n    const state = this.resetDimensionsState({ width, height, perspective, sideOffset });\n\n    if (Object.keys(state).length) this.setState(state);\n  }\n\n  repaint(nextProps) {\n    const sidesCount = this.calcChildrenLength(nextProps.children);\n\n    const axis = nextProps.axis !== 'X' ? 'Y' : 'X';\n    const [width, height] = this.calcDimensions();\n    const mainDimension = axis === 'X' ? height : width;\n    const perspective = this.calcPerspective(mainDimension, sidesCount);\n    const sideOffset = this.calcSideOffset(mainDimension, sidesCount);\n\n    const nextSide = this.getSideNum(nextProps.side);\n    const currentSide = nextSide < sidesCount ? nextSide : sidesCount - 1;\n\n    const axisSign = axis === 'X' ? 1 : -1;\n    const figureAngle = this.calcRotateAngle(currentSide, sidesCount) * axisSign;\n    const sides = Array(sidesCount).fill(0);\n    const sidesAngles = sides.map((_, num) => (this.calcRotateAngle(num, sidesCount) * -axisSign));\n\n    const state = Object.assign(\n      {},\n      this.resetDimensionsState({ width, height, perspective, sideOffset }),\n      this.resetAxisState({ axis, perspective, sideOffset, figureAngle, sidesAngles }),\n      this.resetSidesCountState({ sidesCount, sideOffset, figureAngle, sidesAngles }),\n      this.resetCurrentSideState({ currentSide, sidesCount, axisSign, figureAngle })\n    );\n\n    this.applyState(state);\n  }\n\n  applyState(state) {\n    if (!Object.keys(state).length) return;\n\n    if (state.animation) {\n      this.toggleAnimationReset(false);\n    }\n\n    this.setState(state);\n\n    if (state.animation) {\n      this.toggleAnimationReset(true);\n    }\n  }\n\n  renderShadow(num) {\n    if (!this.props.shadow) return null;\n    if (!this.is3DSupported) return null;\n\n    return (\n      <div style={ this.getShadowStyles(num) } />\n    );\n  }\n\n  setFigureNode(c) {\n    this.figureNode = c;\n  }\n\n  render() {\n    const hasBackground = this.props.background !== null;\n\n    return (\n      <div style={ this.getSceneStyles() }>\n        <div style={ this.getContainerStyles() }>\n          <div style={ this.getFigureStyles() } ref={ this.setFigureNode }>\n            { React.Children.map(this.props.children, (child, num) => {\n              if (num >= MAXCOUNT) return null;\n\n              return (\n                <div style={ this.getSideStyles(num) }>\n                  <div\n                    style={ styles.sideWrapper }\n                    ref={ (c) => { this.sidesNodes[num] = c; } }\n                  >\n                    { this.getChildVisibility(num) ? child : null }\n                    { !hasBackground && this.renderShadow(num) }\n                  </div>\n                  { hasBackground && this.renderShadow(num) }\n                </div>\n              );\n            }) }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nAnimakitRotator.propTypes = {\n  children: PropTypes.any,\n  sheet: PropTypes.any,\n  axis: PropTypes.string,\n  side: PropTypes.any,\n  duration: PropTypes.number,\n  easing: PropTypes.string,\n  shadow: PropTypes.bool,\n  background: PropTypes.string,\n};\n\nAnimakitRotator.defaultProps = {\n  axis: 'X',\n  side: 0,\n  duration: 1000,\n  easing: 'cubic-bezier(.165,.84,.44,1)',\n  shadow: false,\n  background: null,\n};\n"]},"metadata":{},"sourceType":"script"}