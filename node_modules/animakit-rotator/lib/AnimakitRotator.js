'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('./utils');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MAXCOUNT = 6;

var AnimakitRotator = function (_Component) {
  _inherits(AnimakitRotator, _Component);

  function AnimakitRotator(props) {
    _classCallCheck(this, AnimakitRotator);

    var _this = _possibleConstructorReturn(this, (AnimakitRotator.__proto__ || Object.getPrototypeOf(AnimakitRotator)).call(this, props));

    _this.state = {
      animation: false,

      sidesCount: 0,
      currentSide: 0,
      prevSide: 0,

      width: 0,
      height: 0,
      winHeight: 0,
      perspective: 0,

      sideOffset: 0,
      figureAngle: 0,
      sidesAngles: [],

      turnover: 0
    };

    _this.setFigureNode = _this.setFigureNode.bind(_this);
    return _this;
  }

  _createClass(AnimakitRotator, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.figureNode = null;
      this.sidesNodes = [];
      this.sidesDimensions = [];

      this.is3DSupported = (0, _utils.is3DSupported)();
      this.transitionEventName = (0, _utils.transitionEventName)();

      this.listeners = this.getListeners();

      this.animationReset = false;
      this.animationResetTO = null;
      this.resizeCheckerRAF = null;

      this.onWinResize();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.repaint(this.props);

      this.toggleAnimationListener(true);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.repaint(nextProps);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      var _this2 = this;

      var stateChanged = !(0, _utils.isEqual)(nextState, this.state);

      var childrenChanged = !(0, _utils.isEqual)(nextProps.children, this.props.children);

      var propsChanged = ['background', 'shadow'].some(function (name) {
        return nextProps[name] !== _this2.props[name];
      });

      return stateChanged || childrenChanged || propsChanged;
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate() {
      this.toggleResizeChecker(false);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.toggleResizeChecker(true);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.toggleResizeChecker(false);
      this.toggleAnimationReset(false);
      this.toggleAnimationListener(false);
      this.toggleWinResizeListener(false);
    }
  }, {
    key: 'onTransitionEnd',
    value: function onTransitionEnd() {
      if (!this.animationReset) return;

      this.setState({
        animation: false
      });
    }
  }, {
    key: 'onCheckResize',
    value: function onCheckResize() {
      this.toggleResizeChecker(false);

      this.softRepaint();

      this.toggleResizeChecker(true);
    }
  }, {
    key: 'onWinResize',
    value: function onWinResize() {
      this.setState({
        winHeight: window.innerHeight
      });
    }
  }, {
    key: 'getListeners',
    value: function getListeners() {
      return {
        onTransitionEnd: this.onTransitionEnd.bind(this),
        onCheckResize: this.onCheckResize.bind(this),
        onWinResize: this.onWinResize.bind(this)
      };
    }
  }, {
    key: 'toggleResizeChecker',
    value: function toggleResizeChecker(start) {
      if (typeof requestAnimationFrame === 'undefined') return;

      if (start) {
        this.resizeCheckerRAF = requestAnimationFrame(this.listeners.onCheckResize);
      } else if (this.resizeCheckerRAF) {
        cancelAnimationFrame(this.resizeCheckerRAF);
      }
    }
  }, {
    key: 'toggleAnimationReset',
    value: function toggleAnimationReset(add) {
      var _this3 = this;

      if (this.animationResetTO) clearTimeout(this.animationResetTO);

      if (add) {
        this.animationResetTO = setTimeout(function () {
          _this3.animationReset = true;
        }, this.props.duration);
      } else {
        this.animationReset = false;
      }
    }
  }, {
    key: 'toggleAnimationListener',
    value: function toggleAnimationListener(add) {
      var method = add ? 'addEventListener' : 'removeEventListener';
      this.figureNode[method](this.transitionEventName, this.listeners.onTransitionEnd, false);
    }
  }, {
    key: 'toggleWinResizeListener',
    value: function toggleWinResizeListener(add) {
      var method = add ? 'addEventListener' : 'removeEventListener';
      window[method]('resize', this.listeners.onWinResize, false);
    }
  }, {
    key: 'getSceneStyles',
    value: function getSceneStyles() {
      var _state = this.state,
          width = _state.width,
          height = _state.height,
          perspective = _state.perspective;


      if (!width || !height) return null;

      if (!this.is3DSupported) return _extends({}, _styles2.default.scene, { width: width, height: height });

      return _extends({}, _styles2.default.scene, { width: width, height: height, perspective: perspective });
    }
  }, {
    key: 'getContainerStyles',
    value: function getContainerStyles() {
      if (!this.is3DSupported) return null;

      var _state2 = this.state,
          width = _state2.width,
          height = _state2.height,
          sideOffset = _state2.sideOffset;


      if (!width || !height) return null;

      var transform = 'translateZ(' + sideOffset * -1 + 'px)';

      return _extends({}, _styles2.default.container, { transform: transform });
    }
  }, {
    key: 'getFigureStyles',
    value: function getFigureStyles() {
      if (!this.is3DSupported) return null;

      var _state3 = this.state,
          width = _state3.width,
          height = _state3.height,
          figureAngle = _state3.figureAngle,
          turnover = _state3.turnover,
          axis = _state3.axis,
          animation = _state3.animation;


      if (!width || !height) return null;

      var angle = figureAngle + turnover * 360;
      var transform = 'rotate' + axis + '(' + angle + 'deg)';

      if (!animation) return _extends({}, _styles2.default.figure, { transform: transform });

      var _props = this.props,
          duration = _props.duration,
          easing = _props.easing;

      var transition = 'transform ' + duration + 'ms ' + easing;

      return _extends({}, _styles2.default.figure, { transform: transform, transition: transition });
    }
  }, {
    key: 'getSideStyles',
    value: function getSideStyles(num) {
      var _state4 = this.state,
          width = _state4.width,
          height = _state4.height,
          axis = _state4.axis,
          sidesAngles = _state4.sidesAngles,
          sideOffset = _state4.sideOffset,
          currentSide = _state4.currentSide,
          animation = _state4.animation;


      if (!width || !height) return null;

      var background = this.props.background || 'transparent';
      var transform = 'rotate' + axis + '(' + sidesAngles[num] + 'deg) translateZ(' + sideOffset + 'px)';

      if (this.is3DSupported) return _extends({}, _styles2.default.side, { transform: transform, background: background });

      var opacity = num === currentSide ? 1 : 0;
      var zIndex = num === currentSide ? 2 : 1;

      if (!animation) return _extends({}, _styles2.default.side, { opacity: opacity, zIndex: zIndex, background: background });

      var _props2 = this.props,
          duration = _props2.duration,
          easing = _props2.easing;

      var transition = 'opacity ' + duration + 'ms ' + easing;

      return _extends({}, _styles2.default.side, { opacity: opacity, zIndex: zIndex, transition: transition, background: background });
    }
  }, {
    key: 'getShadowStyles',
    value: function getShadowStyles(num) {
      var _state5 = this.state,
          currentSide = _state5.currentSide,
          sidesCount = _state5.sidesCount,
          animation = _state5.animation;


      if (!sidesCount) return {};

      var opacity = num === currentSide ? 0 : 2 / sidesCount;

      if (!animation) return _extends({}, _styles2.default.sideShadow, { opacity: opacity });

      var _props3 = this.props,
          duration = _props3.duration,
          easing = _props3.easing;

      var transition = 'opacity ' + duration + 'ms ' + easing;

      return _extends({}, _styles2.default.sideShadow, { opacity: opacity, transition: transition });
    }
  }, {
    key: 'getChildVisibility',
    value: function getChildVisibility(num) {
      if (num >= MAXCOUNT) return false;

      if (!this.state.width || !this.state.height) return true;

      var _state6 = this.state,
          currentSide = _state6.currentSide,
          prevSide = _state6.prevSide,
          sidesCount = _state6.sidesCount,
          animation = _state6.animation;


      if (num === currentSide) return true;

      if (animation && (sidesCount > 4 || Math.abs(currentSide - num) > 1)) {
        if (num === prevSide) return true;

        var _getNeighbors = (0, _utils.getNeighbors)(prevSide, sidesCount - 1),
            _getNeighbors2 = _slicedToArray(_getNeighbors, 2),
            _neighbor = _getNeighbors2[0],
            _neighbor2 = _getNeighbors2[1];

        if (num === _neighbor || num === _neighbor2) return true;
      }

      var _getNeighbors3 = (0, _utils.getNeighbors)(currentSide, sidesCount - 1),
          _getNeighbors4 = _slicedToArray(_getNeighbors3, 2),
          neighbor1 = _getNeighbors4[0],
          neighbor2 = _getNeighbors4[1];

      return (num === neighbor1 || num === neighbor2) && (animation || sidesCount > 4);
    }
  }, {
    key: 'getSideNum',
    value: function getSideNum(sideKey) {
      var sideNum = sideKey;

      _react2.default.Children.forEach(this.props.children, function (child, num) {
        if (child.key === sideKey) sideNum = num;
      });

      return sideNum;
    }
  }, {
    key: 'calcDimensions',
    value: function calcDimensions() {
      var _this4 = this;

      var maxWidth = 0;
      var maxHeight = 0;

      _react2.default.Children.map(this.props.children, function (child, num) {
        var width = 0;
        var height = 0;

        if (_this4.sidesDimensions[num]) {
          width = _this4.sidesDimensions[num].width;
          height = _this4.sidesDimensions[num].height;
        }

        if (_this4.getChildVisibility(num)) {
          var node = _this4.sidesNodes[num];

          if (node) {
            var newWidth = node.offsetWidth;
            var newHeight = node.offsetHeight;

            width = Math.abs(newWidth - width) <= 1 ? width : newWidth;
            height = Math.abs(newHeight - height) <= 1 ? height : newHeight;
          }

          _this4.sidesDimensions[num] = { width: width, height: height };
        }

        if (width > maxWidth) maxWidth = width;
        if (height > maxHeight) maxHeight = height;
      });

      return [maxWidth, maxHeight];
    }
  }, {
    key: 'calcChildrenLength',
    value: function calcChildrenLength(children) {
      var length = Array.isArray(children) ? children.length : 1;

      if (length > MAXCOUNT) length = MAXCOUNT;

      return length;
    }
  }, {
    key: 'calcRotateAngle',
    value: function calcRotateAngle(num, sidesCount) {
      return 360 / sidesCount * num;
    }
  }, {
    key: 'calcSideOffset',
    value: function calcSideOffset(size, sidesCount) {
      if (!sidesCount || sidesCount < 3) return 0;

      var count = sidesCount > MAXCOUNT ? MAXCOUNT : sidesCount;

      var circleRadius = [0.289, 0.5, 0.688, 0.866];

      return size * circleRadius[count - 3];
    }
  }, {
    key: 'calcPerspective',
    value: function calcPerspective(mainDimension, sidesCount) {
      if (!sidesCount || sidesCount < 2) return null;
      if (sidesCount === 2) return this.state.winHeight;
      return mainDimension * 4;
    }
  }, {
    key: 'resetDimensionsState',
    value: function resetDimensionsState(stateChunk) {
      var width = stateChunk.width,
          height = stateChunk.height,
          perspective = stateChunk.perspective;


      if (width === this.state.width && height === this.state.height && perspective === this.state.perspective) return {};

      return stateChunk;
    }
  }, {
    key: 'resetAxisState',
    value: function resetAxisState(stateChunk) {
      var axis = stateChunk.axis;

      if (axis === this.state.axis) return {};

      return stateChunk;
    }
  }, {
    key: 'resetSidesCountState',
    value: function resetSidesCountState(stateChunk) {
      var sidesCount = stateChunk.sidesCount;

      if (sidesCount === this.state.sidesCount) return {};

      this.toggleWinResizeListener(sidesCount === 2);

      if (sidesCount < this.state.sidesCount) {
        this.sidesDimensions.splice(sidesCount - 1, 1);
      }

      return stateChunk;
    }
  }, {
    key: 'resetCurrentSideState',
    value: function resetCurrentSideState(stateChunk) {
      var currentSide = stateChunk.currentSide,
          sidesCount = stateChunk.sidesCount,
          axisSign = stateChunk.axisSign,
          figureAngle = stateChunk.figureAngle;

      var prevSide = this.state.currentSide;

      if (currentSide === prevSide) return {};

      var animation = true;
      var turnover = this.state.turnover;

      if (currentSide === 0 && prevSide === sidesCount - 1) {
        turnover += axisSign;
      }
      if (sidesCount > 2 && currentSide === sidesCount - 1 && prevSide === 0) {
        turnover -= axisSign;
      }

      return { currentSide: currentSide, prevSide: prevSide, figureAngle: figureAngle, turnover: turnover, animation: animation };
    }
  }, {
    key: 'softRepaint',
    value: function softRepaint() {
      var sidesCount = this.state.sidesCount;

      var _calcDimensions = this.calcDimensions(),
          _calcDimensions2 = _slicedToArray(_calcDimensions, 2),
          width = _calcDimensions2[0],
          height = _calcDimensions2[1];

      var mainDimension = this.state.axis === 'X' ? height : width;
      var perspective = this.calcPerspective(mainDimension, sidesCount);
      var sideOffset = this.calcSideOffset(mainDimension, sidesCount);

      var state = this.resetDimensionsState({ width: width, height: height, perspective: perspective, sideOffset: sideOffset });

      if (Object.keys(state).length) this.setState(state);
    }
  }, {
    key: 'repaint',
    value: function repaint(nextProps) {
      var _this5 = this;

      var sidesCount = this.calcChildrenLength(nextProps.children);

      var axis = nextProps.axis !== 'X' ? 'Y' : 'X';

      var _calcDimensions3 = this.calcDimensions(),
          _calcDimensions4 = _slicedToArray(_calcDimensions3, 2),
          width = _calcDimensions4[0],
          height = _calcDimensions4[1];

      var mainDimension = axis === 'X' ? height : width;
      var perspective = this.calcPerspective(mainDimension, sidesCount);
      var sideOffset = this.calcSideOffset(mainDimension, sidesCount);

      var nextSide = this.getSideNum(nextProps.side);
      var currentSide = nextSide < sidesCount ? nextSide : sidesCount - 1;

      var axisSign = axis === 'X' ? 1 : -1;
      var figureAngle = this.calcRotateAngle(currentSide, sidesCount) * axisSign;
      var sides = Array(sidesCount).fill(0);
      var sidesAngles = sides.map(function (_, num) {
        return _this5.calcRotateAngle(num, sidesCount) * -axisSign;
      });

      var state = Object.assign({}, this.resetDimensionsState({ width: width, height: height, perspective: perspective, sideOffset: sideOffset }), this.resetAxisState({ axis: axis, perspective: perspective, sideOffset: sideOffset, figureAngle: figureAngle, sidesAngles: sidesAngles }), this.resetSidesCountState({ sidesCount: sidesCount, sideOffset: sideOffset, figureAngle: figureAngle, sidesAngles: sidesAngles }), this.resetCurrentSideState({ currentSide: currentSide, sidesCount: sidesCount, axisSign: axisSign, figureAngle: figureAngle }));

      this.applyState(state);
    }
  }, {
    key: 'applyState',
    value: function applyState(state) {
      if (!Object.keys(state).length) return;

      if (state.animation) {
        this.toggleAnimationReset(false);
      }

      this.setState(state);

      if (state.animation) {
        this.toggleAnimationReset(true);
      }
    }
  }, {
    key: 'renderShadow',
    value: function renderShadow(num) {
      if (!this.props.shadow) return null;
      if (!this.is3DSupported) return null;

      return _react2.default.createElement('div', { style: this.getShadowStyles(num) });
    }
  }, {
    key: 'setFigureNode',
    value: function setFigureNode(c) {
      this.figureNode = c;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this6 = this;

      var hasBackground = this.props.background !== null;

      return _react2.default.createElement(
        'div',
        { style: this.getSceneStyles() },
        _react2.default.createElement(
          'div',
          { style: this.getContainerStyles() },
          _react2.default.createElement(
            'div',
            { style: this.getFigureStyles(), ref: this.setFigureNode },
            _react2.default.Children.map(this.props.children, function (child, num) {
              if (num >= MAXCOUNT) return null;

              return _react2.default.createElement(
                'div',
                { style: _this6.getSideStyles(num) },
                _react2.default.createElement(
                  'div',
                  {
                    style: _styles2.default.sideWrapper,
                    ref: function ref(c) {
                      _this6.sidesNodes[num] = c;
                    }
                  },
                  _this6.getChildVisibility(num) ? child : null,
                  !hasBackground && _this6.renderShadow(num)
                ),
                hasBackground && _this6.renderShadow(num)
              );
            })
          )
        )
      );
    }
  }]);

  return AnimakitRotator;
}(_react.Component);

exports.default = AnimakitRotator;


AnimakitRotator.propTypes = {
  children: _propTypes2.default.any,
  sheet: _propTypes2.default.any,
  axis: _propTypes2.default.string,
  side: _propTypes2.default.any,
  duration: _propTypes2.default.number,
  easing: _propTypes2.default.string,
  shadow: _propTypes2.default.bool,
  background: _propTypes2.default.string
};

AnimakitRotator.defaultProps = {
  axis: 'X',
  side: 0,
  duration: 1000,
  easing: 'cubic-bezier(.165,.84,.44,1)',
  shadow: false,
  background: null
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,